---
title: "Cereals nutritional information"
subtitle: "Are cereals healthy?"
author: "Aditya Ranade"
highlight-style: github-light
date: "2025-05-08"
categories: [analysis, python]
image: "./cereals.jpg"
jupyter: python3
---

::: {style="text-align: justify"}
Cereals are commonly consumed for breakfast. But how good are they in terms of the nutritional value?
:::

::: {style="text-align: justify"}
I found this dataset on Kaggle which gives the nutritional information about their cereals. First, we look at the exploratory data analysis and later try some simple regression models. First let us access and process the data through python
:::

```{python}
#| label: load-packages
#| echo: true
#| warning: false
#| include: true

# Load Libraries

# Load Libraries
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from plotnine import *
import numpy as np # linear algebra
# import statsmodels.api as sm
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt
import seaborn as sns
import random
from scipy.stats import pearsonr

# Get starbucks data from github repo
df0=pd.read_csv("https://raw.githubusercontent.com//adityaranade//cereals//refs//heads//main//cereal.csv", encoding='unicode_escape')
df0.head()

```

```{python}
#| label: data_processing1
#| echo: true
#| warning: false
#| include: true

# modify the column names
df0.columns = ['name', 'manufacturer','type','calories','protein','fat','sodium','fiber','carbohydrates','sugar','potassium','vitamins','shelf','weight','cups', 'rating']
df0.head()

```

```{python}
#| label: data_processing2
#| echo: true
#| warning: false
#| include: true

# select data for the histogram
df = df0[["calories", "protein", "fat", "sodium", "fiber", "carbohydrates", "sugar","potassium","name"]]
df.head()

# Use melt function for the histograms of variables 
df2 = pd.melt(df, id_vars=['name'])
# df2.head()
```

::: {style="text-align: justify"}
Now that we have the data ready, let us look at the histogram of each variables namely nutritional contents, specifically calories, protein, fat, sodium, fiber, carbo, sugars and potassium
:::

```{python}
#| label: EDA
#| echo: true
#| warning: false
#| include: true

p = (
    ggplot(df2, aes("value"))
    + geom_histogram(bins=10)
    + facet_grid(". ~ variable", scales='free_x')
    + theme(figure_size=(12, 3))
    )

# If we want the density on y axis
# p = (
#     ggplot(df2, aes("value", after_stat("density")))
#     + geom_histogram(bins=10)
#     + facet_grid(". ~ variable", scales='free_x')
#     + theme(figure_size=(12, 3))
#     )

p.show()
```

The histogram of each of the variables do not show any problems as all the plots look decent. We will look at the correlation plot.

```{python}
#| label: EDA2
#| echo: true
#| warning: false
#| include: true
# Check the correlation between the variables
sns.heatmap(df.iloc[:,:-1].corr(),annot=True,cmap="viridis")
plt.show()
```

::: {style="text-align: justify"}

Calories variable has significant positive correlation with all the variables except fiber and potassium. This seems logical and will be useful when we build a regression model for the same. Next we take a look at the pairs plot which will give us idea about relationship between each pair of variables. Most important from the point of prediction is the first row where calories is the y axis and each of the variable is x axis.
:::

```{python}
#| label: test
#| echo: false
#| warning: false
#| include: false

# def reg_coef(x,y,label=None,color=None,hue=None,**kwargs):
#     ax = plt.gca()
#     r,p = pearsonr(x,y)
#     ax.annotate('r = {:.2f}'.format(r), xy=(0.5,0.5), xycoords='axes fraction', ha='center')
#     ax.set_axis_off()
# 
# g = sns.PairGrid(df.iloc[:,1:])
# g.map_diag(sns.histplot)
# g.map_upper(sns.scatterplot)
# g.map_lower(reg_coef, hue=None)
# g.add_legend()
# plt.show()
```

```{python}
#| label: EDA3
#| echo: true
#| warning: false
#| include: true

# Pairs plot
g = sns.PairGrid(df.iloc[:,1:])
g.map_diag(sns.histplot)
g.map_upper(sns.scatterplot)
g.map_lower(sns.kdeplot)
plt.show()

```

::: {style="text-align: justify"}
The scatterplots of each variable with calories which can be seen in the upper triangular plots in the very first row. It seems there is a linear association between calories and fat, carbs and protein. However, it does not seem to have a linear association with fiber.
:::

```{python}
#| label: mlr_train
#| echo: true
#| warning: false
#| include: true

# Split data into train and test set
indices = range(len(df)) # Create a list of indices

# Get 75% random indices
random.seed(23) # for reproducible example
random_indices = random.sample(indices, round(0.75*len(df)))

# Training dataset
data_train = df.iloc[random_indices,:-1]

# Testing dataset
data_test = df.iloc[df.index.difference(random_indices),:-1]

# Build a multiple linear regression model to predict calories using other variables using training data
result = smf.ols("calories ~ protein + fat + sodium + fiber + carbohydrates + sugar + potassium", data = data_train).fit()
# check the summary
result.summary()

```

::: {style="text-align: justify"}
p-value for sodium, fiber and potassium is considerably high and hence these variables do not add help predict the calories. This might be due to multicollinearity (the predictor variables are have high correlation within themselves). If we look at the correlation plot, fiber and potassium has 0.9 correlation which is high. One way to tackle multicollinearity is to consider principal component analysis (PCA). We will look at it in a while but let us first try to make predictions and look at the evaluation metrics.
:::

::: {style="text-align: justify"}
Now let us make prediction on the testing data and plot the observed vs. predicted plot
:::

```{python}
#| label: prediction_test
#| echo: true
#| warning: false
#| include: true

# Make predictions using testing data
predictions = result.predict(data_test)

# Observed vs. Predicted plot
plt.figure(figsize=(20,7))
plt.scatter(predictions, data_test["calories"])
plt.ylabel("Observed calories")
plt.xlabel("Predicted calories")
# Create the abline
x_line = np.linspace(min(data_test["calories"]), max(data_test["calories"]), 100)
y_line = 1 * x_line + 1
plt.plot(x_line, y_line, color='red')
plt.show()
```

::: {style="text-align: justify"}
The observed vs. predicted looks good. However there is low number of data points and hence we should take this with a grain of salt. Let us check some evaluation metrics like the Root Mean Squared Error (RMSE) and Mean Absolute Error (MAE).
:::

```{python}
from sklearn.metrics import mean_absolute_error,mean_squared_error
print("Mean Absolute Error:",round(mean_absolute_error(data_test["calories"],predictions),2))
print("Root Mean Squared Error:",round((mean_squared_error(data_test["calories"],predictions))** 0.5,2))
```

::: {style="text-align: justify"}
Root Mean Squared Error (RMSE) of 5.34 and Mean Absolute Error (MAE) of 6.89 is decent and indicates model is performing fairly well.
:::
