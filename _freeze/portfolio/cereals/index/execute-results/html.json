{
  "hash": "ec6a9259607e94824889375da8dba15e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Cereals nutritional information\"\nsubtitle: \"Predicting calories cereals based on the nutritional contents\"\nauthor: \"Aditya Ranade\"\nhighlight-style: github-light\ndate: \"2025-02-13\"\ncategories: [analysis, python]\nimage: \"./cereals.jpg\"\njupyter: python3\n---\n\n\n\n\n::: {style=\"text-align: justify\"}\nCereals are commonly consumed for breakfast. But how good are they in terms of the nutritional value? Can we predict the calories based on the nutritional contents ?\n:::\n\n::: {style=\"text-align: justify\"}\nI found this dataset on Kaggle which gives the nutritional information about their cereals. First, we look at the exploratory data analysis and later try some simple regression models. First let us access and process the data through python\n:::\n\n::: {#cell-load-packages .cell execution_count=1}\n``` {.python .cell-code}\n# Load Libraries\n\n# Load Libraries\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom plotnine import *\nimport numpy as np # linear algebra\n# import statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom scipy.stats import pearsonr\n\n# Get starbucks data from github repo\n\npath = \"https://raw.githubusercontent.com//adityaranade//portfolio//refs//heads//main//cereals//cereal.csv\"\n\ndf0=pd.read_csv(path, encoding='unicode_escape')\n\ndf0.head()\n```\n\n::: {#load-packages .cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>mfr</th>\n      <th>type</th>\n      <th>calories</th>\n      <th>protein</th>\n      <th>fat</th>\n      <th>sodium</th>\n      <th>fiber</th>\n      <th>carbo</th>\n      <th>sugars</th>\n      <th>potass</th>\n      <th>vitamins</th>\n      <th>shelf</th>\n      <th>weight</th>\n      <th>cups</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>100% Bran</td>\n      <td>N</td>\n      <td>C</td>\n      <td>70</td>\n      <td>4</td>\n      <td>1</td>\n      <td>130</td>\n      <td>10.0</td>\n      <td>5.0</td>\n      <td>6</td>\n      <td>280</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.33</td>\n      <td>68.402973</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>100% Natural Bran</td>\n      <td>Q</td>\n      <td>C</td>\n      <td>120</td>\n      <td>3</td>\n      <td>5</td>\n      <td>15</td>\n      <td>2.0</td>\n      <td>8.0</td>\n      <td>8</td>\n      <td>135</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>1.00</td>\n      <td>33.983679</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>All-Bran</td>\n      <td>K</td>\n      <td>C</td>\n      <td>70</td>\n      <td>4</td>\n      <td>1</td>\n      <td>260</td>\n      <td>9.0</td>\n      <td>7.0</td>\n      <td>5</td>\n      <td>320</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.33</td>\n      <td>59.425505</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>All-Bran with Extra Fiber</td>\n      <td>K</td>\n      <td>C</td>\n      <td>50</td>\n      <td>4</td>\n      <td>0</td>\n      <td>140</td>\n      <td>14.0</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>330</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>93.704912</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Almond Delight</td>\n      <td>R</td>\n      <td>C</td>\n      <td>110</td>\n      <td>2</td>\n      <td>2</td>\n      <td>200</td>\n      <td>1.0</td>\n      <td>14.0</td>\n      <td>8</td>\n      <td>-1</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.75</td>\n      <td>34.384843</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-data_processing1 .cell execution_count=2}\n``` {.python .cell-code}\n# modify the column names\ndf0.columns = ['name', 'manufacturer','type','calories','protein','fat','sodium','fiber','carbohydrates','sugar','potassium','vitamins','shelf','weight','cups', 'rating']\ndf0.head()\n```\n\n::: {#data_processing1 .cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>manufacturer</th>\n      <th>type</th>\n      <th>calories</th>\n      <th>protein</th>\n      <th>fat</th>\n      <th>sodium</th>\n      <th>fiber</th>\n      <th>carbohydrates</th>\n      <th>sugar</th>\n      <th>potassium</th>\n      <th>vitamins</th>\n      <th>shelf</th>\n      <th>weight</th>\n      <th>cups</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>100% Bran</td>\n      <td>N</td>\n      <td>C</td>\n      <td>70</td>\n      <td>4</td>\n      <td>1</td>\n      <td>130</td>\n      <td>10.0</td>\n      <td>5.0</td>\n      <td>6</td>\n      <td>280</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.33</td>\n      <td>68.402973</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>100% Natural Bran</td>\n      <td>Q</td>\n      <td>C</td>\n      <td>120</td>\n      <td>3</td>\n      <td>5</td>\n      <td>15</td>\n      <td>2.0</td>\n      <td>8.0</td>\n      <td>8</td>\n      <td>135</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>1.00</td>\n      <td>33.983679</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>All-Bran</td>\n      <td>K</td>\n      <td>C</td>\n      <td>70</td>\n      <td>4</td>\n      <td>1</td>\n      <td>260</td>\n      <td>9.0</td>\n      <td>7.0</td>\n      <td>5</td>\n      <td>320</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.33</td>\n      <td>59.425505</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>All-Bran with Extra Fiber</td>\n      <td>K</td>\n      <td>C</td>\n      <td>50</td>\n      <td>4</td>\n      <td>0</td>\n      <td>140</td>\n      <td>14.0</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>330</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>93.704912</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Almond Delight</td>\n      <td>R</td>\n      <td>C</td>\n      <td>110</td>\n      <td>2</td>\n      <td>2</td>\n      <td>200</td>\n      <td>1.0</td>\n      <td>14.0</td>\n      <td>8</td>\n      <td>-1</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.75</td>\n      <td>34.384843</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#data_processing2 .cell execution_count=3}\n``` {.python .cell-code}\n# select data for the histogram\ndf = df0[[\"calories\", \"protein\", \"fat\", \"sodium\", \"fiber\", \"carbohydrates\", \"sugar\",\"potassium\",\"name\"]]\ndf.head()\n\n# Use melt function for the histograms of variables \ndf2 = pd.melt(df, id_vars=['name'])\n# df2.head()\n```\n:::\n\n\n::: {style=\"text-align: justify\"}\nNow that we have the data ready, let us look at the histogram of each variables namely nutritional contents, specifically calories, protein, fat, sodium, fiber, carbo, sugars and potassium\n:::\n\n::: {#cell-EDA .cell execution_count=4}\n``` {.python .cell-code}\np = (\n    ggplot(df2, aes(\"value\"))\n    + geom_histogram(bins=10)\n    + facet_grid(\". ~ variable\", scales='free_x')\n    + theme(figure_size=(12, 3))\n    )\n\n# If we want the density on y axis\n# p = (\n#     ggplot(df2, aes(\"value\", after_stat(\"density\")))\n#     + geom_histogram(bins=10)\n#     + facet_grid(\". ~ variable\", scales='free_x')\n#     + theme(figure_size=(12, 3))\n#     )\n\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/eda-output-1.png){#eda width=1152 height=288}\n:::\n:::\n\n\nThe histogram of each of the variables do not show any problems as all the plots look decent. We will look at the correlation plot.\n\n::: {#cell-EDA2 .cell execution_count=5}\n``` {.python .cell-code}\n# Check the correlation between the variables\nplt.figure(figsize=(20,10))\nsns.heatmap(df.iloc[:,:-1].corr(),annot=True,cmap=\"viridis\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/eda2-output-1.png){#eda2}\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nCalories variable has significant positive correlation with all the variables except fiber and potassium. This seems logical and will be useful when we build a regression model for the same. Next we take a look at the pairs plot which will give us idea about relationship between each pair of variables. Most important from the point of prediction is the first row where calories is the y axis and each of the variable is x axis.\n:::\n\n\n::: {#cell-EDA3 .cell execution_count=7}\n``` {.python .cell-code}\n# Pairs plot\ng = sns.PairGrid(df.iloc[:,1:])\ng.map_diag(sns.histplot)\ng.map_upper(sns.scatterplot)\ng.map_lower(sns.kdeplot)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/eda3-output-1.png){#eda3}\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nThe scatterplots of each variable with calories which can be seen in the upper triangular plots in the very first row. It seems there is a linear association between calories and fat, carbs and protein. However, it does not seem to have a linear association with fiber.\n:::\n\n::: {#cell-mlr_train .cell execution_count=8}\n``` {.python .cell-code}\n# Split data into train and test set\nindices = range(len(df)) # Create a list of indices\n\n# Get 75% random indices\nrandom.seed(23) # for reproducible example\nrandom_indices = random.sample(indices, round(0.75*len(df)))\n\n# Training dataset\ndata_train = df.iloc[random_indices,:-1]\n\n# Testing dataset\ndata_test = df.iloc[df.index.difference(random_indices),:-1]\n\n# Build a multiple linear regression model to predict calories using other variables using training data\nresult = smf.ols(\"calories ~ protein + fat + sodium + fiber + carbohydrates + sugar + potassium\", data = data_train).fit()\n# check the summary\nresult.summary()\n```\n\n::: {#mlr_train .cell-output .cell-output-display execution_count=8}\n```{=html}\n<table class=\"simpletable\">\n<caption>OLS Regression Results</caption>\n<tr>\n  <th>Dep. Variable:</th>        <td>calories</td>     <th>  R-squared:         </th> <td>   0.783</td>\n</tr>\n<tr>\n  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.753</td>\n</tr>\n<tr>\n  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   25.78</td>\n</tr>\n<tr>\n  <th>Date:</th>             <td>Sun, 25 May 2025</td> <th>  Prob (F-statistic):</th> <td>1.59e-14</td>\n</tr>\n<tr>\n  <th>Time:</th>                 <td>11:07:25</td>     <th>  Log-Likelihood:    </th> <td> -205.34</td>\n</tr>\n<tr>\n  <th>No. Observations:</th>      <td>    58</td>      <th>  AIC:               </th> <td>   426.7</td>\n</tr>\n<tr>\n  <th>Df Residuals:</th>          <td>    50</td>      <th>  BIC:               </th> <td>   443.2</td>\n</tr>\n<tr>\n  <th>Df Model:</th>              <td>     7</td>      <th>                     </th>     <td> </td>   \n</tr>\n<tr>\n  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n        <td></td>           <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n</tr>\n<tr>\n  <th>Intercept</th>     <td>   27.1211</td> <td>    8.231</td> <td>    3.295</td> <td> 0.002</td> <td>   10.588</td> <td>   43.654</td>\n</tr>\n<tr>\n  <th>protein</th>       <td>    5.8767</td> <td>    1.433</td> <td>    4.102</td> <td> 0.000</td> <td>    2.999</td> <td>    8.754</td>\n</tr>\n<tr>\n  <th>fat</th>           <td>    8.7752</td> <td>    1.482</td> <td>    5.920</td> <td> 0.000</td> <td>    5.798</td> <td>   11.753</td>\n</tr>\n<tr>\n  <th>sodium</th>        <td>    0.0062</td> <td>    0.016</td> <td>    0.381</td> <td> 0.705</td> <td>   -0.026</td> <td>    0.039</td>\n</tr>\n<tr>\n  <th>fiber</th>         <td>    0.1062</td> <td>    1.480</td> <td>    0.072</td> <td> 0.943</td> <td>   -2.866</td> <td>    3.078</td>\n</tr>\n<tr>\n  <th>carbohydrates</th> <td>    2.5884</td> <td>    0.380</td> <td>    6.811</td> <td> 0.000</td> <td>    1.825</td> <td>    3.352</td>\n</tr>\n<tr>\n  <th>sugar</th>         <td>    3.1356</td> <td>    0.365</td> <td>    8.587</td> <td> 0.000</td> <td>    2.402</td> <td>    3.869</td>\n</tr>\n<tr>\n  <th>potassium</th>     <td>   -0.0489</td> <td>    0.052</td> <td>   -0.937</td> <td> 0.353</td> <td>   -0.154</td> <td>    0.056</td>\n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n  <th>Omnibus:</th>       <td>29.387</td> <th>  Durbin-Watson:     </th> <td>   2.071</td>\n</tr>\n<tr>\n  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  80.990</td>\n</tr>\n<tr>\n  <th>Skew:</th>          <td> 1.410</td> <th>  Prob(JB):          </th> <td>2.59e-18</td>\n</tr>\n<tr>\n  <th>Kurtosis:</th>      <td> 8.055</td> <th>  Cond. No.          </th> <td>1.39e+03</td>\n</tr>\n</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.39e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems.\n```\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\np-value for sodium, fiber and potassium is considerably high and hence these variables do not add help predict the calories. This might be due to multicollinearity (the predictor variables are have high correlation within themselves). If we look at the correlation plot, fiber and potassium has 0.9 correlation which is high. One way to tackle multicollinearity is to consider principal component analysis (PCA). We will look at it in a while but let us first try to make predictions and look at the evaluation metrics.\n:::\n\n::: {style=\"text-align: justify\"}\nNow let us make prediction on the testing data and plot the observed vs. predicted plot\n:::\n\n::: {#cell-prediction_test .cell execution_count=9}\n``` {.python .cell-code}\n# Make predictions using testing data\npredictions = result.predict(data_test)\n\n# Observed vs. Predicted plot\nplt.figure(figsize=(20,7))\nplt.scatter(predictions, data_test[\"calories\"])\nplt.ylabel(\"Observed calories\")\nplt.xlabel(\"Predicted calories\")\n# Create the abline\nx_line = np.linspace(min(data_test[\"calories\"]), max(data_test[\"calories\"]), 100)\ny_line = 1 * x_line + 1\nplt.plot(x_line, y_line, color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/prediction_test-output-1.png){#prediction_test}\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nThe observed vs. predicted looks good. However there is low number of data points and hence we should take this with a grain of salt. Let us check some evaluation metrics like the Root Mean Squared Error (RMSE) and Mean Absolute Error (MAE).\n:::\n\n::: {#evaluation_metrics .cell execution_count=10}\n``` {.python .cell-code}\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nprint(\"Mean Absolute Error:\",round(mean_absolute_error(data_test[\"calories\"],predictions),2))\nprint(\"Root Mean Squared Error:\",round((mean_squared_error(data_test[\"calories\"],predictions))** 0.5,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Absolute Error: 5.34\nRoot Mean Squared Error: 6.89\n```\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nRoot Mean Squared Error (RMSE) of 5.34 and Mean Absolute Error (MAE) of 6.89 is decent and indicates model is performing fairly well.\n:::\n\n::: {style=\"text-align: justify\"}\nNow, we will run regression model based on principal component analysis since it helps with multicollinearity.\n:::\n\n::: {#cell-PCA_processing .cell execution_count=11}\n``` {.python .cell-code}\n# Principal component analysis\nfrom sklearn.decomposition import PCA\n\n# separate the x and y variable for the training data first\ny_train = data_train.iloc[:,:1]\nX0_train = data_train.iloc[:,1:]\n\n# Standardize the predictor data first\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\n# training data\nX_train_scaled = sc.fit_transform(X0_train)\n\n# Now calculate the principal components\nfrom sklearn.decomposition import PCA\npca = PCA()\nprincipalComponents = pca.fit_transform(X_train_scaled)\n# Training data\nX_train_pca = pd.DataFrame(data = principalComponents,\n             columns=['PC{}'.format(i+1)\n                      for i in range(principalComponents.shape[1])])\n\n\n\nexplained_variance = pca.explained_variance_ratio_\nexplained_variance\n```\n\n::: {#pca_processing .cell-output .cell-output-display execution_count=11}\n```\narray([0.37089562, 0.24123216, 0.14712018, 0.12790205, 0.05655818,\n       0.0483467 , 0.0079451 ])\n```\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nThe first six principal components explain around 99% of the data, so we will use the first 6 principal components to build a regression model.\n:::\n\n::: {#cell-PCA_processing2 .cell execution_count=12}\n``` {.python .cell-code}\nX_train_pca = pd.DataFrame(data = principalComponents,\n             columns=['PC{}'.format(i+1)\n                      for i in range(principalComponents.shape[1])])\n\n# combine the X and Y for the training data\ndata_train_pca = X_train_pca\ndata_train_pca.set_index(X0_train.index,inplace = True)\ndata_train_pca['calories'] = y_train\ndata_train_pca.head()\n```\n\n::: {#pca_processing2 .cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PC1</th>\n      <th>PC2</th>\n      <th>PC3</th>\n      <th>PC4</th>\n      <th>PC5</th>\n      <th>PC6</th>\n      <th>PC7</th>\n      <th>calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>37</th>\n      <td>-1.860753</td>\n      <td>0.565043</td>\n      <td>0.525620</td>\n      <td>-0.850117</td>\n      <td>-0.237526</td>\n      <td>0.005600</td>\n      <td>0.155876</td>\n      <td>110</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>-1.341762</td>\n      <td>1.558699</td>\n      <td>0.886958</td>\n      <td>0.766110</td>\n      <td>-0.195248</td>\n      <td>-0.671615</td>\n      <td>-0.098032</td>\n      <td>120</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.512654</td>\n      <td>-0.609249</td>\n      <td>2.068686</td>\n      <td>-0.856303</td>\n      <td>-0.653496</td>\n      <td>-0.585533</td>\n      <td>0.433959</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>-0.253116</td>\n      <td>-0.667314</td>\n      <td>0.281191</td>\n      <td>0.402756</td>\n      <td>0.867213</td>\n      <td>0.766825</td>\n      <td>-0.165899</td>\n      <td>140</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>-1.338187</td>\n      <td>-0.005653</td>\n      <td>-2.407667</td>\n      <td>-1.446089</td>\n      <td>-0.053030</td>\n      <td>-1.193701</td>\n      <td>0.316424</td>\n      <td>50</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-correlation_plot .cell execution_count=13}\n``` {.python .cell-code}\n# Correlation plot for principal components\nplt.figure(figsize=(20,10))\nsns.heatmap(data_train_pca.corr().round(4),annot=True, cmap=\"viridis\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/correlation_plot-output-1.png){#correlation_plot}\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nWe can observe that only calories variable has correlation with the principal components and the correlation between the principal components is practically 0. So we will use the principal components to build a regression model.\n:::\n\n::: {#cell-PCA_model .cell execution_count=14}\n``` {.python .cell-code}\n# Now run the OLS regression model on the first five principal components\n# Fit the OLS regression\nresult_pca = smf.ols(\"calories ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6\", data = data_train_pca).fit()\n# check the summary\nresult_pca.summary()\n```\n\n::: {#pca_model .cell-output .cell-output-display execution_count=14}\n```{=html}\n<table class=\"simpletable\">\n<caption>OLS Regression Results</caption>\n<tr>\n  <th>Dep. Variable:</th>        <td>calories</td>     <th>  R-squared:         </th> <td>   0.774</td>\n</tr>\n<tr>\n  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.747</td>\n</tr>\n<tr>\n  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   29.03</td>\n</tr>\n<tr>\n  <th>Date:</th>             <td>Sun, 25 May 2025</td> <th>  Prob (F-statistic):</th> <td>7.97e-15</td>\n</tr>\n<tr>\n  <th>Time:</th>                 <td>11:07:27</td>     <th>  Log-Likelihood:    </th> <td> -206.59</td>\n</tr>\n<tr>\n  <th>No. Observations:</th>      <td>    58</td>      <th>  AIC:               </th> <td>   427.2</td>\n</tr>\n<tr>\n  <th>Df Residuals:</th>          <td>    51</td>      <th>  BIC:               </th> <td>   441.6</td>\n</tr>\n<tr>\n  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>   \n</tr>\n<tr>\n  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n</tr>\n<tr>\n  <th>Intercept</th> <td>  107.7586</td> <td>    1.194</td> <td>   90.277</td> <td> 0.000</td> <td>  105.362</td> <td>  110.155</td>\n</tr>\n<tr>\n  <th>PC1</th>       <td>   -1.8336</td> <td>    0.741</td> <td>   -2.475</td> <td> 0.017</td> <td>   -3.321</td> <td>   -0.346</td>\n</tr>\n<tr>\n  <th>PC2</th>       <td>    3.8950</td> <td>    0.919</td> <td>    4.240</td> <td> 0.000</td> <td>    2.051</td> <td>    5.739</td>\n</tr>\n<tr>\n  <th>PC3</th>       <td>    4.3355</td> <td>    1.176</td> <td>    3.686</td> <td> 0.001</td> <td>    1.974</td> <td>    6.697</td>\n</tr>\n<tr>\n  <th>PC4</th>       <td>   10.9172</td> <td>    1.261</td> <td>    8.654</td> <td> 0.000</td> <td>    8.385</td> <td>   13.450</td>\n</tr>\n<tr>\n  <th>PC5</th>       <td>    9.0880</td> <td>    1.897</td> <td>    4.791</td> <td> 0.000</td> <td>    5.279</td> <td>   12.896</td>\n</tr>\n<tr>\n  <th>PC6</th>       <td>   12.7554</td> <td>    2.052</td> <td>    6.217</td> <td> 0.000</td> <td>    8.636</td> <td>   16.875</td>\n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n  <th>Omnibus:</th>       <td>21.542</td> <th>  Durbin-Watson:     </th> <td>   2.118</td>\n</tr>\n<tr>\n  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  44.731</td>\n</tr>\n<tr>\n  <th>Skew:</th>          <td> 1.104</td> <th>  Prob(JB):          </th> <td>1.94e-10</td>\n</tr>\n<tr>\n  <th>Kurtosis:</th>      <td> 6.692</td> <th>  Cond. No.          </th> <td>    2.77</td>\n</tr>\n</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n```\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\n$R^{2}$ is 77.4% which is decent and all the predictor variables have a low p-value value. We make predictions using the test data and then plot the out of sample observed vs. predicted. First we calculate the principal components of the testing data and then make the predictions.\n:::\n\n::: {#pca_test_data .cell execution_count=15}\n``` {.python .cell-code}\n# X for testing data\nX0_test = data_test.iloc[:,1:]\n\n# scaled test data\nX_test_scaled = sc.transform(X0_test)\n\n# calculate the principal components for the testing data\nX_test = pca.transform(X_test_scaled)\nX_test_pca = pd.DataFrame(data = X_test,\n             columns=['PC{}'.format(i+1)\n                      for i in range(X_test.shape[1])])\n# calculate the predictions\npredictions_pca = result_pca.predict(X_test_pca)\n```\n:::\n\n\n::: {style=\"text-align: justify\"}\nNow we plot the out of sample predictions obtained from regression model using raw data as well as the predictions obtained from model using the first six principal components on the same plot with different colors.\n:::\n\n::: {#cell-PCA_predicted .cell execution_count=16}\n``` {.python .cell-code}\n# Observed vs. Predicted plot\nplt.figure(figsize=(20,7))\n\nplt.scatter(predictions, data_test[\"calories\"], label='raw', color='black', marker='o')\nplt.scatter(predictions_pca, data_test[\"calories\"],  label='PCA', color='blue', marker='o')\n# sns.regplot(y = data_test[\"calories\"],x = predictions,ci=None,line_kws={\"color\":\"red\"})\nplt.ylabel(\"Observed calories\")\nplt.xlabel(\"Predicted calories\")\nplt.legend()\n\n# Create the abline\nx_line = np.linspace(min(data_test[\"calories\"]), max(data_test[\"calories\"]), 100)\ny_line = 1 * x_line + 1\nplt.plot(x_line, y_line, color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/pca_predicted-output-1.png){#pca_predicted}\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nThe out of sample observed vs. predicted plot looks decent with all the points just around the red line. WE look at the evaluation metrics for the model built using the principal components.\n:::\n\n::: {#pca_metrics .cell execution_count=17}\n``` {.python .cell-code}\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nprint(\"Mean Absolute Error:\",round(mean_absolute_error(data_test[\"calories\"],predictions_pca),2))\nprint(\"Root Mean Squared Error:\",round((mean_squared_error(data_test[\"calories\"],predictions_pca))** 0.5,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Absolute Error: 4.66\nRoot Mean Squared Error: 6.11\n```\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nFor the regression model using first six principal components, Root Mean Squared Error (RMSE) is 4.66 and Mean Absolute Error (MAE) is 6.11 which is an improvement from the regression model using the raw data.\n:::\n\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}