{
  "hash": "ba55bda36318a3f3c05dd1361e37ef4a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Cereals nutritional information\"\nsubtitle: \"Are cereals healthy?\"\nauthor: \"Aditya Ranade\"\nhighlight-style: github-light\ndate: \"2025-05-08\"\ncategories: [analysis, python]\nimage: \"./cereals.jpg\"\njupyter: python3\n---\n\n\n::: {style=\"text-align: justify\"}\nCereals are commonly consumed for breakfast. But how good are they in terms of the nutritional value?\n:::\n\n::: {style=\"text-align: justify\"}\nI found this dataset on Kaggle which gives the nutritional information about their cereals. First, we look at the exploratory data analysis and later try some simple regression models. First let us access and process the data through python\n:::\n\n::: {#cell-load-packages .cell execution_count=1}\n``` {.python .cell-code}\n# Load Libraries\n\n# Load Libraries\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom plotnine import *\nimport numpy as np # linear algebra\n# import statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom scipy.stats import pearsonr\n\n# Get starbucks data from github repo\ndf0=pd.read_csv(\"https://raw.githubusercontent.com//adityaranade//cereals//refs//heads//main//cereal.csv\", encoding='unicode_escape')\ndf0.head()\n```\n\n::: {#load-packages .cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>mfr</th>\n      <th>type</th>\n      <th>calories</th>\n      <th>protein</th>\n      <th>fat</th>\n      <th>sodium</th>\n      <th>fiber</th>\n      <th>carbo</th>\n      <th>sugars</th>\n      <th>potass</th>\n      <th>vitamins</th>\n      <th>shelf</th>\n      <th>weight</th>\n      <th>cups</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>100% Bran</td>\n      <td>N</td>\n      <td>C</td>\n      <td>70</td>\n      <td>4</td>\n      <td>1</td>\n      <td>130</td>\n      <td>10.0</td>\n      <td>5.0</td>\n      <td>6</td>\n      <td>280</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.33</td>\n      <td>68.402973</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>100% Natural Bran</td>\n      <td>Q</td>\n      <td>C</td>\n      <td>120</td>\n      <td>3</td>\n      <td>5</td>\n      <td>15</td>\n      <td>2.0</td>\n      <td>8.0</td>\n      <td>8</td>\n      <td>135</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>1.00</td>\n      <td>33.983679</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>All-Bran</td>\n      <td>K</td>\n      <td>C</td>\n      <td>70</td>\n      <td>4</td>\n      <td>1</td>\n      <td>260</td>\n      <td>9.0</td>\n      <td>7.0</td>\n      <td>5</td>\n      <td>320</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.33</td>\n      <td>59.425505</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>All-Bran with Extra Fiber</td>\n      <td>K</td>\n      <td>C</td>\n      <td>50</td>\n      <td>4</td>\n      <td>0</td>\n      <td>140</td>\n      <td>14.0</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>330</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>93.704912</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Almond Delight</td>\n      <td>R</td>\n      <td>C</td>\n      <td>110</td>\n      <td>2</td>\n      <td>2</td>\n      <td>200</td>\n      <td>1.0</td>\n      <td>14.0</td>\n      <td>8</td>\n      <td>-1</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.75</td>\n      <td>34.384843</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-data_processing1 .cell execution_count=2}\n``` {.python .cell-code}\n# modify the column names\ndf0.columns = ['name', 'manufacturer','type','calories','protein','fat','sodium','fiber','carbohydrates','sugar','potassium','vitamins','shelf','weight','cups', 'rating']\ndf0.head()\n```\n\n::: {#data_processing1 .cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>manufacturer</th>\n      <th>type</th>\n      <th>calories</th>\n      <th>protein</th>\n      <th>fat</th>\n      <th>sodium</th>\n      <th>fiber</th>\n      <th>carbohydrates</th>\n      <th>sugar</th>\n      <th>potassium</th>\n      <th>vitamins</th>\n      <th>shelf</th>\n      <th>weight</th>\n      <th>cups</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>100% Bran</td>\n      <td>N</td>\n      <td>C</td>\n      <td>70</td>\n      <td>4</td>\n      <td>1</td>\n      <td>130</td>\n      <td>10.0</td>\n      <td>5.0</td>\n      <td>6</td>\n      <td>280</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.33</td>\n      <td>68.402973</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>100% Natural Bran</td>\n      <td>Q</td>\n      <td>C</td>\n      <td>120</td>\n      <td>3</td>\n      <td>5</td>\n      <td>15</td>\n      <td>2.0</td>\n      <td>8.0</td>\n      <td>8</td>\n      <td>135</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>1.00</td>\n      <td>33.983679</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>All-Bran</td>\n      <td>K</td>\n      <td>C</td>\n      <td>70</td>\n      <td>4</td>\n      <td>1</td>\n      <td>260</td>\n      <td>9.0</td>\n      <td>7.0</td>\n      <td>5</td>\n      <td>320</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.33</td>\n      <td>59.425505</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>All-Bran with Extra Fiber</td>\n      <td>K</td>\n      <td>C</td>\n      <td>50</td>\n      <td>4</td>\n      <td>0</td>\n      <td>140</td>\n      <td>14.0</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>330</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>93.704912</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Almond Delight</td>\n      <td>R</td>\n      <td>C</td>\n      <td>110</td>\n      <td>2</td>\n      <td>2</td>\n      <td>200</td>\n      <td>1.0</td>\n      <td>14.0</td>\n      <td>8</td>\n      <td>-1</td>\n      <td>25</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.75</td>\n      <td>34.384843</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#data_processing2 .cell execution_count=3}\n``` {.python .cell-code}\n# select data for the histogram\ndf = df0[[\"calories\", \"protein\", \"fat\", \"sodium\", \"fiber\", \"carbohydrates\", \"sugar\",\"potassium\",\"name\"]]\ndf.head()\n\n# Use melt function for the histograms of variables \ndf2 = pd.melt(df, id_vars=['name'])\n# df2.head()\n```\n:::\n\n\n::: {style=\"text-align: justify\"}\nNow that we have the data ready, let us look at the histogram of each variables namely nutritional contents, specifically calories, protein, fat, sodium, fiber, carbo, sugars and potassium\n:::\n\n::: {#cell-EDA .cell execution_count=4}\n``` {.python .cell-code}\np = (\n    ggplot(df2, aes(\"value\"))\n    + geom_histogram(bins=10)\n    + facet_grid(\". ~ variable\", scales='free_x')\n    + theme(figure_size=(12, 3))\n    )\n\n# If we want the density on y axis\n# p = (\n#     ggplot(df2, aes(\"value\", after_stat(\"density\")))\n#     + geom_histogram(bins=10)\n#     + facet_grid(\". ~ variable\", scales='free_x')\n#     + theme(figure_size=(12, 3))\n#     )\n\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/eda-output-1.png){#eda width=1152 height=288}\n:::\n:::\n\n\nThe histogram of each of the variables do not show any problems as all the plots look decent. We will look at the correlation plot.\n\n::: {#cell-EDA2 .cell execution_count=5}\n``` {.python .cell-code}\n# Check the correlation between the variables\nsns.heatmap(df.iloc[:,:-1].corr(),annot=True,cmap=\"viridis\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/eda2-output-1.png){#eda2}\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\n\nCalories variable has significant positive correlation with all the variables except fiber and potassium. This seems logical and will be useful when we build a regression model for the same. Next we take a look at the pairs plot which will give us idea about relationship between each pair of variables. Most important from the point of prediction is the first row where calories is the y axis and each of the variable is x axis.\n:::\n\n\n::: {#cell-EDA3 .cell execution_count=7}\n``` {.python .cell-code}\n# Pairs plot\ng = sns.PairGrid(df.iloc[:,1:])\ng.map_diag(sns.histplot)\ng.map_upper(sns.scatterplot)\ng.map_lower(sns.kdeplot)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/eda3-output-1.png){#eda3}\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nThe scatterplots of each variable with calories which can be seen in the upper triangular plots in the very first row. It seems there is a linear association between calories and fat, carbs and protein. However, it does not seem to have a linear association with fiber.\n:::\n\n::: {#cell-mlr_train .cell execution_count=8}\n``` {.python .cell-code}\n# Split data into train and test set\nindices = range(len(df)) # Create a list of indices\n\n# Get 75% random indices\nrandom.seed(23) # for reproducible example\nrandom_indices = random.sample(indices, round(0.75*len(df)))\n\n# Training dataset\ndata_train = df.iloc[random_indices,:-1]\n\n# Testing dataset\ndata_test = df.iloc[df.index.difference(random_indices),:-1]\n\n# Build a multiple linear regression model to predict calories using other variables using training data\nresult = smf.ols(\"calories ~ protein + fat + sodium + fiber + carbohydrates + sugar + potassium\", data = data_train).fit()\n# check the summary\nresult.summary()\n```\n\n::: {#mlr_train .cell-output .cell-output-display execution_count=8}\n```{=html}\n<table class=\"simpletable\">\n<caption>OLS Regression Results</caption>\n<tr>\n  <th>Dep. Variable:</th>        <td>calories</td>     <th>  R-squared:         </th> <td>   0.783</td>\n</tr>\n<tr>\n  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.753</td>\n</tr>\n<tr>\n  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   25.78</td>\n</tr>\n<tr>\n  <th>Date:</th>             <td>Thu, 15 May 2025</td> <th>  Prob (F-statistic):</th> <td>1.59e-14</td>\n</tr>\n<tr>\n  <th>Time:</th>                 <td>18:55:41</td>     <th>  Log-Likelihood:    </th> <td> -205.34</td>\n</tr>\n<tr>\n  <th>No. Observations:</th>      <td>    58</td>      <th>  AIC:               </th> <td>   426.7</td>\n</tr>\n<tr>\n  <th>Df Residuals:</th>          <td>    50</td>      <th>  BIC:               </th> <td>   443.2</td>\n</tr>\n<tr>\n  <th>Df Model:</th>              <td>     7</td>      <th>                     </th>     <td> </td>   \n</tr>\n<tr>\n  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n        <td></td>           <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n</tr>\n<tr>\n  <th>Intercept</th>     <td>   27.1211</td> <td>    8.231</td> <td>    3.295</td> <td> 0.002</td> <td>   10.588</td> <td>   43.654</td>\n</tr>\n<tr>\n  <th>protein</th>       <td>    5.8767</td> <td>    1.433</td> <td>    4.102</td> <td> 0.000</td> <td>    2.999</td> <td>    8.754</td>\n</tr>\n<tr>\n  <th>fat</th>           <td>    8.7752</td> <td>    1.482</td> <td>    5.920</td> <td> 0.000</td> <td>    5.798</td> <td>   11.753</td>\n</tr>\n<tr>\n  <th>sodium</th>        <td>    0.0062</td> <td>    0.016</td> <td>    0.381</td> <td> 0.705</td> <td>   -0.026</td> <td>    0.039</td>\n</tr>\n<tr>\n  <th>fiber</th>         <td>    0.1062</td> <td>    1.480</td> <td>    0.072</td> <td> 0.943</td> <td>   -2.866</td> <td>    3.078</td>\n</tr>\n<tr>\n  <th>carbohydrates</th> <td>    2.5884</td> <td>    0.380</td> <td>    6.811</td> <td> 0.000</td> <td>    1.825</td> <td>    3.352</td>\n</tr>\n<tr>\n  <th>sugar</th>         <td>    3.1356</td> <td>    0.365</td> <td>    8.587</td> <td> 0.000</td> <td>    2.402</td> <td>    3.869</td>\n</tr>\n<tr>\n  <th>potassium</th>     <td>   -0.0489</td> <td>    0.052</td> <td>   -0.937</td> <td> 0.353</td> <td>   -0.154</td> <td>    0.056</td>\n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n  <th>Omnibus:</th>       <td>29.387</td> <th>  Durbin-Watson:     </th> <td>   2.071</td>\n</tr>\n<tr>\n  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  80.990</td>\n</tr>\n<tr>\n  <th>Skew:</th>          <td> 1.410</td> <th>  Prob(JB):          </th> <td>2.59e-18</td>\n</tr>\n<tr>\n  <th>Kurtosis:</th>      <td> 8.055</td> <th>  Cond. No.          </th> <td>1.39e+03</td>\n</tr>\n</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.39e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems.\n```\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\np-value for sodium, fiber and potassium is considerably high and hence these variables do not add help predict the calories. This might be due to multicollinearity (the predictor variables are have high correlation within themselves). If we look at the correlation plot, fiber and potassium has 0.9 correlation which is high. One way to tackle multicollinearity is to consider principal component analysis (PCA). We will look at it in a while but let us first try to make predictions and look at the evaluation metrics.\n:::\n\n::: {style=\"text-align: justify\"}\nNow let us make prediction on the testing data and plot the observed vs. predicted plot\n:::\n\n::: {#cell-prediction_test .cell execution_count=9}\n``` {.python .cell-code}\n# Make predictions using testing data\npredictions = result.predict(data_test)\n\n# Observed vs. Predicted plot\nplt.figure(figsize=(20,7))\nplt.scatter(predictions, data_test[\"calories\"])\nplt.ylabel(\"Observed calories\")\nplt.xlabel(\"Predicted calories\")\n# Create the abline\nx_line = np.linspace(min(data_test[\"calories\"]), max(data_test[\"calories\"]), 100)\ny_line = 1 * x_line + 1\nplt.plot(x_line, y_line, color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/prediction_test-output-1.png){#prediction_test}\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nThe observed vs. predicted looks good. However there is low number of data points and hence we should take this with a grain of salt. Let us check some evaluation metrics like the Root Mean Squared Error (RMSE) and Mean Absolute Error (MAE).\n:::\n\n::: {#d225cd4d .cell execution_count=10}\n``` {.python .cell-code}\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nprint(\"Mean Absolute Error:\",round(mean_absolute_error(data_test[\"calories\"],predictions),2))\nprint(\"Root Mean Squared Error:\",round((mean_squared_error(data_test[\"calories\"],predictions))** 0.5,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Absolute Error: 5.34\nRoot Mean Squared Error: 6.89\n```\n:::\n:::\n\n\n::: {style=\"text-align: justify\"}\nRoot Mean Squared Error (RMSE) of 5.34 and Mean Absolute Error (MAE) of 6.89 is decent and indicates model is performing fairly well.\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}